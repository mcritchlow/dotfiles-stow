# vim: set filetype=sh:
# Shell functions
# --------------------------------------------------------------------

# Kubernetes switch context
ksc() {
  kubectl config use-context $(kubectl config get-contexts --no-headers | awk {'print $2'} | fzf)
}

# Kubernetes setup a debug session pod in a namespace
# we assume the k8s context is already set
k8s-debug-start() {
  local namespace
  podname='ephemeral-debug-pod'
  namespace=$(kubectl get ns | awk '{print $1}' | fzf)
  kubectl run "$podname" --image=k8s.gcr.io/pause --wait=true --restart=Never --namespace="$namespace"
  kubectl debug -it "$podname" --image=alpine:latest --target="$podname" --namespace "$namespace"
}

# Kubernetes delete a debug session pod from a namespace
# we assume the k8s context is already set
k8s-debug-stop() {
  local namespace
  podname='ephemeral-debug-pod'
  namespace=$(kubectl get ns | awk '{print $1}' | fzf)
  kubectl delete pod --namespace="$namespace" "$podname"
}


# Delete all deployments in a namespace
helm-clean() {
  local namespace
  namespace=$(kubectl get ns | awk '{print $1}' | fzf)
  helm list --namespace "$namespace" --short | xargs -L1 helm delete --namespace "$namespace"
}

# Build a new rails app w/ docker
# expected args: app name, app database
new-rails-app(){
  local name="${1-blog}"
  local db="${2-postgresql}"
  docker pull registry.gitlab.com/ucsdlibrary/rails-builder:stable
  docker run --rm -it -e APP_NAME="$name" -e APP_DB="$db" --mount type=bind,source="$(pwd)",target=/builder registry.gitlab.com/ucsdlibrary/rails-builder:stable
  sudo chown -R "$UID":"$GID" "$name"
  cd "$name" || exit
}
# Sometimes gpg-agent struggles w/ ssh..
gpg-reload-agent() {
  systemctl --user restart gpg-agent.service
  sleep 3
  gpg-connect-agent updatestartuptty /bye >/dev/null
}

# Arch related
# remove program as well as dependencies and system configs
pacman-remove() {
  sudo pacman -Rns "$1"
}

# Kill pid using bemenu
killpid ()
{
  local pid_to_kill
  pid_to_kill="$(ps -eo pid,cmd | bemenu -p 'PID to kill: ' -l 25 | tr -s ' ' | cut -d ' ' -f2)"
  sudo kill "$pid_to_kill"
}

# Switch lpass accounts
# options: work, personal
# must line up w/ directories in ~/.local/share
lpass-switch-account() {
  local account="${1-work}"
  rm -rf ~/.local/share/lpass
  ln -fs ~/.local/share/$account ~/.local/share/lpass
}

wttr() {
    # change Paris to your default location
    local request="wttr.in/${1-92024}"
    [ "$COLUMNS" -lt 125 ] && request+='?n'
    curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

bundler-search() {
  # Search your bundle for the provided pattern
  #   Requires bundler 1.8+ for execution as a bundler subcommand.
  #   Examples:
  #     bundle search Kernal.warn
  #     bundle search current_user clearance
  #     bundle search "Change your password" clearance
  #
  # Arguments:
  #  1. What to search for
  #  2. Which gem names to search (defaults to all gems)

  pattern="$1"; shift
  rg "$pattern" "$(bundle show --paths "$@")"
}

# update personal repos
update-personal-repos() {
  local current_path=$(pwd)
  local project_base=~/projects/personal
  local projects=('dotfiles' 'laptop' 'sync-stuff')
  for project in $projects
  do
    cd "$project_base/$project" && git pull origin trunk
  done
  cd "$current_path" || return
}

# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      unrar x $1      ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Replace a A/V file metadata title with one that has no emojis
# This is needed because dwm barfs horrendously when emojis are in the metadata title/window
ffmpeg-emoji-fix() {
  local input_file="$1"; shift
  local output_file="$1"
  local file_suffix
  file_suffix=$(echo "$input_file" | awk -F '.' '{ print $2 }')

  ffmpeg -i "$input_file" -metadata title="$output_file" -acodec copy -vcodec copy "$output_file.$file_suffix"
}

# invoke ctags hook in git repository
git-ctags() {
  [ -f .git/hooks/ctags ] || git init
  .git/hooks/ctags
}

# Use Vim less script for color
lessc () {
  /usr/share/vim/vim80/macros/less.sh "$@"
}

# LastPass-CLI - copy pw to clipboard w/ fzf
lpp () {
  lpass show -c --password "$(lpass ls  | fzf | awk '{print $(NF)}' | sed 's/\]//g')"
}

# gd() {
#   [ "$1" ] && "cd *$1*" || return
# }

csbuild() {
  [ $# -eq 0 ] && return

  cmd="find $(pwd)"
  for ext in "$@"; do
    cmd=" $cmd -name '*.$ext' -o"
  done
  echo ${cmd: 0: ${#cmd} - 3}
  eval "${cmd: 0: ${#cmd} - 3}" > cscope.files &&
  cscope -b -q && rm cscope.files
}

tx() {
  tmux splitw "$*; echo -n Press enter to finish.; read"
  tmux select-layout tiled
  tmux last-pane
}

gitzip() {
  git archive -o $(basename $PWD).zip HEAD
}

gittgz() {
  git archive -o $(basename $PWD).tgz HEAD
}

gitdiffb() {
  if [ $# -ne 2 ]; then
    echo two branch names required
    return
  fi
  git log --graph \
  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
  --abbrev-commit --date=relative $1..$2
}

alias gitv='git log --graph --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

EXTRA=$BASE/bashrc-extra
[ -f "$EXTRA" ] && source "$EXTRA"


# fzf (https://github.com/junegunn/fzf)
# --------------------------------------------------------------------

csi() {
  echo -en "\x1b[$@"
}

fzf-down() {
  fzf --height 50% "$@" --border
}


export FZF_DEFAULT_COMMAND='fd --type file --color=always --follow --hidden --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_DEFAULT_OPTS="--ansi --color=light"
export FZF_DEFAULT_OPTS=" \
--ansi \
--color=bg+:#ccd0da,bg:#eff1f5,spinner:#dc8a78,hl:#d20f39 \
--color=fg:#4c4f69,header:#d20f39,info:#8839ef,pointer:#dc8a78 \
--color=marker:#dc8a78,fg+:#4c4f69,prompt:#8839ef,hl+:#d20f39"

export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind='ctrl-y:execute-silent(echo -n {2..} | wl-copy --trim-newline)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"

# fzf-cd-widget
export FZF_ALT_C_COMMAND='fd --type directory --color=always --follow --hidden --exclude .git'
# TODO: fix preview. it's including git files..
# TODO: fix alt-c theme, looks horrible
export FZF_ALT_C_OPTS="--preview 'exa --all --tree --no-git {} | head -200'"

# fkc - fuzzy kubernetes config
fkc() {
  selected_konfig=$(find ~/.kube/configs -maxdepth 1 -type f | cut -d "/" -f 6 | fzf)
  export KUBECONFIG=~/.kube/configs/$selected_konfig
}


# fco - checkout git branch/tag
fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fco_preview - checkout git branch/tag, with a preview showing the commits between the tag/branch and HEAD
fco_preview() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(git branch --all | grep -v HEAD |
    sed "s/.* //" | sed "s#remotes/[^/]*/##" |
    sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$((echo "$tags"; echo "$branches") |
      fzf --no-hscroll --no-multi --delimiter="\t" -n 2 \
          --ansi --preview="git log -200 --pretty=format:%s $(echo {+2..} | sed 's/$/../')" ) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --header "Press ctrl-s to sort, ctrl-y to copy hash" \
      --preview="git show --color=always {2} | head -200" \
      --bind "ctrl-y:execute:echo {2} | wl-copy -n" \
      --bind "ctrl-m:execute:sh -c 'git show --color=always {2} | less -R'"
}

# ftags - search ctags
ftags() {
  local line
  [ -e tags ] &&
  line=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    cut -c1-$COLUMNS | fzf --nth=2 --tiebreak=begin
  ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
                                      -c "silent tag $(cut -f2 <<< "$line")"
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local file
  file=$(fzf-tmux --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

# ftm [FUZZY PATTERN] - Choose an existing tmux session to attach and switch to, or create a new one
ftm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
     tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# fmusic - Choose a youtube stream to listen to
fmusic() {
  streams="Chilled Cow - Lo-fi hip hop radio | https://youtu.be/5qap5aO4i9A
  Coffee Shop Vibes - Rain Jazz | https://www.youtube.com/watch?v=UJthzYsva1E
  Steezy - Coffee Shop radio | https://youtu.be/-5KAN9_CzSA
  Steezy - Beats to sleep/study to | https://www.youtube.com/watch?v=9_CcYN8MVO8
  Aplitude - Rainy Days in Tokyo | https://youtu.be/ivNIpLdzh7M"
  stream=$(echo "$streams" | bemenu -p 'YouTube Stream: ' -l 10 | cut -d '|' -f 2 | tr -d ' ')
  setsid mpv --video=no --quiet "$stream" >/dev/null 2>&1 &
}

# fts [FUZZY PATTERN] - Launch tmux session from ~/.tmux-projects
fts() {
  local tmux_project
  local base="$XDG_CONFIG_HOME/tmux/projects"
  tmux_project=$(ls "$base" | \
    fzf --height 25% --select-1 --exit-0) &&
  sh "$base/$tmux_project"
}
# fts [FUZZY PATTERN] - Choose a tmux session to kill
fks() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux kill-session -t "$session"
}

# Podman heart FZF
# -------------
# prcv [FUZZY PATTERN] - Choose a podman container to remove (and associated volumes)
prcv() {
  podman ps -a | sed '1d' | fzf -m | awk '{print $1}' | xargs -r podman rm -v
}

# drc [FUZZY PATTERN] - Choose a podman container to remove
prc() {
  podman ps -a | sed '1d' | fzf -m | awk '{print $1}' | xargs -r podman rm
}


# dri [FUZZY PATTERN] - Choose a podman image to remove
pri() {
  podman images | sed '1d' | fzf -m | awk '{print $3}' | xargs -r podman rmi
}

# drv [FUZZY PATTERN] - Choose a podman volume to remove
prv() {
  podman volume ls | sed '1d'| fzf -m | awk '{print $2}' | xargs -r podman volume rm
}

# drvc [FUZZY PATTERN] - Choose a podman volume to check contents of
prvc() {
  local volume=$(podman volume ls | sed '1d' | awk '{print $2}' | fzf)
  podman run --rm -i -v"$volume":/tmp/myvolume busybox find /tmp/myvolume
}

# da [FUZZY PATTERN] - Select a podman container to attach to
pa() {
  podman ps -a | sed '1d' | fzf -1 -q "$1" | awk '{print $1}' | xargs -r podman attach
}
# Docker heart FZF
# -------------

# drcv [FUZZY PATTERN] - Choose a docker container to remove (and associated volumes)
drcv() {
  docker ps -a | sed '1d' | fzf -m | awk '{print $1}' | xargs -r docker rm -v
}

# drc [FUZZY PATTERN] - Choose a docker container to remove
drc() {
  docker ps -a | sed '1d' | fzf -m | awk '{print $1}' | xargs -r docker rm
}


# dri [FUZZY PATTERN] - Choose a docker image to remove
dri() {
  docker images | sed '1d' | fzf -m | awk '{print $1":"$2}' | xargs -r docker rmi
}

# drv [FUZZY PATTERN] - Choose a docker volume to remove
drv() {
  docker volume ls | sed '1d'| fzf -m | awk '{print $2}' | xargs -r docker volume rm
}

# drvc [FUZZY PATTERN] - Choose a docker volume to check contents of
drvc() {
  local volume=$(docker volume ls | sed '1d' | awk '{print $2}' | fzf)
  docker run --rm -i -v"$volume":/tmp/myvolume busybox find /tmp/myvolume
}

# da [FUZZY PATTERN] - Select a docker container to attach to
da() {
  docker ps -a | sed '1d' | fzf -1 -q "$1" | awk '{print $1}' | xargs -r docker attach
}

# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# gdb - select one or more branches to delete
gdb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##' |
  xargs -r git branch -D
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -200'
}

gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}
